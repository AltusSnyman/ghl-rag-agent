<style>
/* Chat Widget Styles */
.chat-widget {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 1000;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.chat-bubble {
    width: 60px;
    height: 60px;
    background: linear-gradient(135deg, #00d4ff, #0099cc);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 4px 20px rgba(0, 212, 255, 0.3);
    transition: all 0.3s ease;
}

.chat-bubble:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 25px rgba(0, 212, 255, 0.4);
}

.chat-bubble svg {
    width: 28px;
    height: 28px;
    fill: white;
}

.chat-container {
    position: absolute;
    bottom: 80px;
    left: 0;
    width: 350px;
    height: 500px;
    background: #1a1a1a;
    border-radius: 15px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
    display: none;
    flex-direction: column;
    overflow: hidden;
    border: 1px solid #333;
}

.chat-container.active {
    display: flex;
    animation: slideIn 0.3s ease;
}

@keyframes slideIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.chat-header {
    background: linear-gradient(135deg, #00d4ff, #0099cc);
    padding: 20px;
    color: white;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.chat-header h3 {
    font-size: 16px;
    font-weight: 600;
    margin: 0;
}

.close-btn {
    background: none;
    border: none;
    color: white;
    font-size: 20px;
    cursor: pointer;
    padding: 5px;
    transition: transform 0.2s;
}

.close-btn:hover {
    transform: scale(1.2);
}

.chat-messages {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    background: #1a1a1a;
}

.message {
    margin-bottom: 15px;
    display: flex;
    align-items: flex-start;
}

.message.user {
    justify-content: flex-end;
}

.message.bot {
    justify-content: flex-start;
}

.message-content {
    max-width: 80%;
    padding: 12px 16px;
    border-radius: 15px;
    font-size: 14px;
    line-height: 1.4;
}

.message.user .message-content {
    background: #00d4ff;
    color: white;
    border-bottom-right-radius: 5px;
}

.message.bot .message-content {
    background: #2a2a2a;
    color: #e0e0e0;
    border: 1px solid #333;
    border-bottom-left-radius: 5px;
}

.typing-indicator {
    display: none;
    padding: 12px 16px;
    background: #2a2a2a;
    border-radius: 15px;
    border-bottom-left-radius: 5px;
    margin-bottom: 15px;
    width: fit-content;
}

.typing-indicator span {
    display: inline-block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #00d4ff;
    margin: 0 2px;
    animation: typing 1.4s infinite;
}

.typing-indicator span:nth-child(2) {
    animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
    animation-delay: 0.4s;
}

@keyframes typing {
    0%, 60%, 100% { transform: translateY(0); }
    30% { transform: translateY(-10px); }
}

.chat-input-container {
    padding: 20px;
    background: #1a1a1a;
    border-top: 1px solid #333;
}

.chat-input {
    display: flex;
    gap: 10px;
}

.chat-input input {
    flex: 1;
    padding: 12px 16px;
    border: 1px solid #333;
    border-radius: 25px;
    background: #2a2a2a;
    color: #e0e0e0;
    font-size: 14px;
    outline: none;
    transition: border-color 0.3s;
}

.chat-input input:focus {
    border-color: #00d4ff;
}

.chat-input input::placeholder {
    color: #666;
}

.send-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #00d4ff, #0099cc);
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s;
}

.send-btn:hover {
    transform: scale(1.1);
}

.send-btn svg {
    width: 20px;
    height: 20px;
    fill: white;
}

.chat-footer {
    padding: 15px;
    background: #0a0a0a;
    text-align: center;
    border-top: 1px solid #333;
}

.chat-footer a {
    color: #00d4ff;
    text-decoration: none;
    font-size: 12px;
    opacity: 0.8;
    transition: opacity 0.3s;
}

.chat-footer a:hover {
    opacity: 1;
}

@media (max-width: 400px) {
    .chat-container {
        width: 90vw;
        height: 70vh;
        bottom: 80px;
        left: 5vw;
    }
    
    .chat-widget {
        bottom: 10px;
        left: 10px;
    }
}

.chat-messages::-webkit-scrollbar {
    width: 6px;
}

.chat-messages::-webkit-scrollbar-track {
    background: #1a1a1a;
}

.chat-messages::-webkit-scrollbar-thumb {
    background: #00d4ff;
    border-radius: 3px;
}

.chat-messages::-webkit-scrollbar-thumb:hover {
    background: #0099cc;
}
</style>

<script>
(function() {
    'use strict';

    // Configuration
    const CONFIG = {
        webhookUrl: 'XXXXXXXXXXXXXXXXXXXXXXX YOUR WEBHOOK URL HERE',
        title: 'Go Highlevel Support Ai',
        firstMessage: 'Hi, how can I help?',
        poweredBy: 'Powered by Ai Agency Mentorship',
        poweredByUrl: 'https://aiagencymentorship.ai/'
    };

    // Generate session ID
    function generateSessionId() {
        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    // Create chat widget
    function createChatWidget() {
        const container = document.createElement('div');
        container.id = 'chat-widget-container';
        document.body.appendChild(container);

        container.innerHTML = 
            '<div class="chat-widget">' +
                '<div class="chat-bubble" id="chat-bubble">' +
                    '<svg viewBox="0 0 24 24">' +
                        '<path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>' +
                    '</svg>' +
                '</div>' +
                
                '<div class="chat-container" id="chat-container">' +
                    '<div class="chat-header">' +
                        '<h3>' + CONFIG.title + '</h3>' +
                        '<button class="close-btn" id="close-btn">Ã—</button>' +
                    '</div>' +
                    
                    '<div class="chat-messages" id="chat-messages">' +
                        '<div class="message bot">' +
                            '<div class="message-content">' + CONFIG.firstMessage + '</div>' +
                        '</div>' +
                    '</div>' +
                    
                    '<div class="typing-indicator" id="typing-indicator">' +
                        '<span></span><span></span><span></span>' +
                    '</div>' +
                    
                    '<div class="chat-input-container">' +
                        '<div class="chat-input">' +
                            '<input type="text" id="message-input" placeholder="Type your message..." maxlength="500">' +
                            '<button class="send-btn" id="send-btn">' +
                                '<svg viewBox="0 0 24 24">' +
                                    '<path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>' +
                                '</svg>' +
                            '</button>' +
                        '</div>' +
                    '</div>' +
                    
                    '<div class="chat-footer">' +
                        '<a href="' + CONFIG.poweredByUrl + '" target="_blank">' + CONFIG.poweredBy + '</a>' +
                    '</div>' +
                '</div>' +
            '</div>';

        const chatBubble = document.getElementById('chat-bubble');
        const chatContainer = document.getElementById('chat-container');
        const closeBtn = document.getElementById('close-btn');
        const messageInput = document.getElementById('message-input');
        const sendBtn = document.getElementById('send-btn');
        const chatMessages = document.getElementById('chat-messages');
        const typingIndicator = document.getElementById('typing-indicator');
        
        let sessionId = localStorage.getItem('chatSessionId') || generateSessionId();
        localStorage.setItem('chatSessionId', sessionId);

        // Event listeners
        chatBubble.addEventListener('click', function() {
            chatContainer.classList.toggle('active');
            if (chatContainer.classList.contains('active')) {
                messageInput.focus();
            }
        });

        closeBtn.addEventListener('click', function() {
            chatContainer.classList.remove('active');
        });

        sendBtn.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Send message
        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;

            // Add user message
            const userMessageDiv = document.createElement('div');
            userMessageDiv.className = 'message user';
            userMessageDiv.innerHTML = '<div class="message-content">' + message + '</div>';
            chatMessages.appendChild(userMessageDiv);
            messageInput.value = '';
            
            // Show typing indicator
            typingIndicator.style.display = 'block';
            chatMessages.scrollTop = chatMessages.scrollHeight;

            try {
                const response = await fetch(CONFIG.webhookUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        sessionId: sessionId
                    })
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const botResponse = await response.text();
                
                // Hide typing indicator and add bot response
                typingIndicator.style.display = 'none';
                const botMessageDiv = document.createElement('div');
                botMessageDiv.className = 'message bot';
                botMessageDiv.innerHTML = '<div class="message-content">' + botResponse + '</div>';
                chatMessages.appendChild(botMessageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
            } catch (error) {
                console.error('Error:', error);
                typingIndicator.style.display = 'none';
                const errorDiv = document.createElement('div');
                errorDiv.className = 'message bot';
                errorDiv.innerHTML = '<div class="message-content">Sorry, I encountered an error. Please try again.</div>';
                chatMessages.appendChild(errorDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        // Close chat when clicking outside
        document.addEventListener('click', function(e) {
            if (!chatContainer.contains(e.target) && !chatBubble.contains(e.target)) {
                chatContainer.classList.remove('active');
            }
        });
    }

    // Initialize when DOM is loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', createChatWidget);
    } else {
        createChatWidget();
    }
})();
</script>
